= slide 'Административни неща' do
  list:
    Първо домашно!
    Срок: до сряда
    Тема във форумите: [https://fmi.rust-lang.bg/topics/20](https://fmi.rust-lang.bg/topics/20)
    Тест (пуснете си го!): [test_basic.rs](https://github.com/fmi/rust-homework/blob/master/01/test_basic.rs)

= slide 'Преговор' do
  list:
    `format!`
    Модули (`mod`, `pub`, `use`)
    Файлове (`lib.rs`, `main.rs`)
    Атрибути (`test`, `derive`, `cfg`)
    Документация
    Тестове (unit, integration, doctests)
    Stuff (итерация, chars)

= slide 'Enums' do
  example:
    enum IpAddrKind {
        V4,
        V6,
    }

= slide 'Enums', 'Защо enum?' do
  list:
    Ограничен брой варанти за разлика от константите
    Потребителски тип, обособява вариантите
    #define е препроцесор

= slide 'Enums', 'инстанциране' do
  example:
    let four = IpAddrKind::V4;
    let six = IpAddrKind::V6;

= slide 'Enums', 'параметър' do
  example:
    fn route(ip_type: IpAddrKind) { }

    route(IpAddrKind::V4);
    route(IpAddrKind::V6);

= slide 'Enums', 'данни' do
  example:
    struct IpAddr {
        kind: IpAddrKind,
        address: String,
    }

    let home = IpAddr {
        kind: IpAddrKind::V4,
        address: String::from("127.0.0.1"),
    };

    let loopback = IpAddr {
        kind: IpAddrKind::V6,
        address: String::from("::1"),
    };

= slide 'Enums', 'данни' do
  p По-удобен и четим начин

  example:
    enum IpAddr {
        V4(String),
        V6(String),
    }

    let home = IpAddr::V4(String::from("127.0.0.1"));

    let loopback = IpAddr::V6(String::from("::1"));

= slide 'Enums', 'данни' do
  p Може да спестим памет като знаем че <code>IPv4</code> използва стойности от 0-255

  example:
    enum IpAddr {
        V4(u8, u8, u8, u8),
        V6(String),
    }

    let home = IpAddr::V4(127, 0, 0, 1);

    let loopback = IpAddr::V6(String::from("::1"));

= slide 'Enums', 'варианти' do
  example:
    enum Message {
        Quit,
        Move { x: i32, y: i32 },
        Write(String),
        ChangeColor(i32, i32, i32),
    }

= slide 'Enum variants as Structs' do
  example:
    struct QuitMessage; // unit struct
    struct MoveMessage {
        x: i32,
        y: i32,
    }
    struct WriteMessage(String); // tuple struct
    struct ChangeColorMessage(i32, i32, i32); // tuple struct

= slide 'Memory layout' do
  table
    thead
      tr
        th Variant
        th Discriminant
        th colspan="12" Data
      tr
        th no-mem
        th {unsigned}
        th colspan="12" 12 bytes
    tbody
      tr
        td Quit
        td style="background: #BBE;" 0
        td colspan="12"
      tr
        td Move
        td style="background: #BBE;" 1
        td colspan="4" style="background: #EBB;" i32
        td colspan="4" style="background: #EBB;" i32
        td colspan="4"
      tr
        td Write
        td style="background: #BBE;" 2
        td colspan="12" style="background: #EBB;" String
      tr
        td ChangeColor
        td style="background: #BBE;" 3
        td colspan="4" style="background: #EBB;" i32
        td colspan="4" style="background: #EBB;" i32
        td colspan="4" style="background: #EBB;" i32

= slide 'Методи' do
  example:
    impl Message {
        fn call(&self) {
            // ...
        }
    }

    let m = Message::Write(String::from("hello"));
    m.call();

= slide 'Енумерацията Option' do
  list:
    В Rust няма NULL!
    Понякога искаме да изразим липсваща стойност.
    Тук идва енумерацията 'Option'

= slide 'Енумерацията Option' do
  p Option има 2 стойности:
  list:
      Some(val)
      None

= slide 'Енумерацията Option' do
  example:
    let some_number = Some(5);
    let some_string = Some("string")
    let absent_number: Option<i32> = None;

= slide 'Pattern Matching', 'Съпоставяне на образци' do
  list:
      Идея идваща от Функционалното програмиране
      Може да се ползва с Енумерации и стойности в тях
      Използва се чрез `match` оператора

= slide 'Pattern Matching', 'Съпоставяне на образци' do
  example:
    match x {
        Some(val) => println!("Value : {}", val),
        None => println!("No value found"),
    }

= slide 'Pattern Matching', 'Съпоставяне на образци' do
  p <code>match</code> може да върне стойност:

  example:
    let y = match x {
        Some(val) => Some(val * val),
        None => None,
    };

= slide 'Pattern Matching', 'Съпоставяне на образци' do
  p <code>match</code> може да върне стойност:

  example:
    let y = match x {
        Some(val) => val * val,
        None => 0,
    };

= slide 'Pattern Matching', 'Съпоставяне на образци' do
  p <code>match</code> може да излезе от функцията

  example:
    let y = match x {
        Some(val) => val * val,
        None => return None,
    };

= slide 'Pattern Matching', 'Съпоставяне на образци' do
  p <code>match</code> може да съдържа блокове от код:

  example:
    let y = match x {
        Some(val) => {
            println!("Will return {}", val * val);
            Some(val * val)
        },
        None => {
            println!("Will do nothing!!");
            None
        },
    };

= slide 'Pattern Matching', 'Съпоставяне на образци' do
  p Задължително трябва да се покрият всички случаи!

  example:
    match x {
        Some(i) => Some(i + 1),
    }

  '<pre>
    error[E0004]: non-exhaustive patterns: `None` not covered
     -->
      |
    6 |         match x {
      |               ^ pattern `None` not covered

= slide 'Pattern Matching', 'Съпоставяне на образци' do
  p Работи и с прости стойности:
  p '_' означава всичко останало

  example:
    match x {
        5 => println!("Five"),
        _ => println!("Not five"),
    }


= slide 'More control flow', 'if let' do
  p Понякога да използваме <code>match</code> за един случай и да покрием всички други с '_' е прекалено много код

  example:
    let some_value = Some(0u8);

    match some_value {
        Some(3) => println!("three"),
        _ => (),
    }

= slide 'More control flow', 'if let' do
  p Запознайте се с <code>if let</code>:

  example:
    let some_value = Some(0u8);

    if let Some(3) = some_value {
        println!("three");
    }

= slide 'Pattern Matching', 'Guards (допълнителни условия)' do
  example:
    let pair = (2, -2);

    match pair {
        (x, y) if x == y                   => println!("Едно и също"),
        (x, y) if x + y == 0               => println!("Противоположни"),
        (x, y) if x % 2 == 1 && y % 2 == 0 => println!("X е нечетно, Y е четно"),
        (x, _) if x % 2 == 1               => println!("X е нечетно"),
        _                                  => println!("Нищо интересно"),
    }

= slide 'Pattern Matching', 'ranges' do
  example:
    let age: i32 = -5;

    match age {
        n if n < 0 => println!("Ще се родя след {} години.", n.abs()),
        0          => println!("Новородено съм."),
        1 ... 12   => println!("Аз съм лапе."),
        13 ... 19  => println!("Аз съм тийн."),
        _          => println!("Аз съм дърт."),
    }

= slide 'Pattern Matching', 'bindings' do
  example:
    let age: i32 = -5;

    match age {
        n if n < 0    => println!("Ще се родя след {} години.", n.abs()),
        0             => println!("Новородено съм."),
        n @ 1 ... 12  => println!("Аз съм лапе на {}.", n),
        n @ 13 ... 19 => println!("Аз съм тийн на {}.", n),
        n             => println!("Аз съм дърт, на {} съм вече.", n),
    }

= slide 'Pattern Matching', 'multiple patterns' do
  example:
    let score: u32 = 5;

    match score {
        0 | 1 => println!("слабичко :("),
        _     => println!("стаа"),
    }

= slide 'Pattern Matching', 'structs' do
  example:
    struct User {
        name: &'static str,
        age: u8
    }

    let user = User {
        name: "Пешо",
        age: 12
    };

    match user {
        User { name: "Пешо", age: _ } => println!("Ко стаа, Пешо"),
        User { name: _, age: 12 }     => println!("Ко стаа, лапе"),
        User { name: x, .. }          => println!("Ко стаа, {}", x),
        _                             => println!("Ко стаа")
    }

= slide 'Destructuring', 'ref' do
  example:
    #[derive(Debug)]
    enum Token {
        Text(String),
        Number(f64)
    }

    let token = Token::Text(String::from("Отговора е 42"));

    match token {
        Token::Text(text) => println!("Токена е Text('{}')", text),
        Token::Number(n) => println!("Токена е Number({})", n),
    }

    // компилационна грешка, ползваме moved value, заради match-ването на `text`
    println!("В крайна сметка, токена е {:?}!", token);

= slide 'Destructuring', 'ref' do
  p Чрез `ref` стойността няма да се премести.

  example:
    match token {
        Token::Text(ref text) => println!("Токена е Text('{}')", text),
        Token::Number(n) => println!("Токена е Number({})", n),
    }

    // няма грешка, `text` е взето като reference
    println!("В крайна сметка, токена е {:?}!", token);

= slide 'Destructuring', 'ref' do
  p Какво всъщност прави ref?
  p Едно просто обяснение е чрез пример

  example:
    let x = &1;
    let ref y = 1;

  list:
    Двете променливи имат един и същ тип
    Първият пример взима референция с `&` в *дясната страна* на твърдението
    Вторият пример взима референция с `ref` в *лявата страна* на твърдението
    Това е важно, защото в `match` ръкава нямаме достъп до "дясната страна"

= slide 'Destructuring', 'ref mut' do
  p Може би се досещате?

  example:
    let mut token = Token::Text(String::from("Отговора е 42"));

    match token {
        Token::Text(ref mut text) => {
            *text = String::from("Може би");
            println!("Токена е Text('{}')", text)
        },
        Token::Number(n) => println!("Токена е Number({})", n),
    }

= slide 'Destructuring', 'let' do
  example:
    let (mut a, b) = (1, 2);
    let User { name: name, ..} = user;
    let User { name, ..} = user;
    let Some(val) = Some(5);    // ??
    let (a, b) = (b, a);        // Please don't use this.. Use mem::swap instead.
