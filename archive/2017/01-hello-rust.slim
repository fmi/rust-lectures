= slide 'Hello, world!' do
  p –ó–∞—â–æ—Ç–æ –≤–∏–Ω–∞–≥–∏ –æ—Ç—Ç–∞–º —Å–µ –ø–æ—á–≤–∞:

  example:
    fn main() {
        println!("Hello, world!");
    }

  pre.action
    ' $ rustc hello.rs
      $ ./hello
      Hello, world!

= slide '–ù—è–º–∞ –ª–∏ –∏ –ø–æ-–ª–µ—Å–µ–Ω –Ω–∞—á–∏–Ω?', '(–∏–º–∞, —Ä–∞–∑–±–∏—Ä–∞ —Å–µ)' do
  pre
    ' $ cargo new hello --bin
      $ cargo run
      Hello, world!

= slide 'Cargo' do
  list:
    Package manager
    Task runner
    –ü–æ–¥–æ–±–Ω–æ –Ω–∞ <strong>mix</strong> –≤ elixir, <strong>bundler</strong> –≤ ruby, <strong>npm</strong> –≤ node.js

= slide 'Rustc' do
  list:
    –£–¥–æ–±–Ω–æ –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ, –±—ä—Ä–∑–∏ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏
    –ù–µ–Ω—É–∂–Ω–æ –∑–∞ –ø–æ–≤–µ—á–µ—Ç–æ —Ü–µ–ª–∏

= slide 'Cargo' do
  em (demo)

= slide '–ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è' do
  list:
    [https://fmi.rust-lang.bg/topics/1](https://fmi.rust-lang.bg/topics/1)
    Rustup ([https://rustup.rs/](https://rustup.rs/))
    <code>$ rustup install stable</code>
    <code>$ rustup doc</code>

= slide 'The Rust Book' do
  p
    a href="https://doc.rust-lang.org/book/second-edition/"
      ' https://doc.rust-lang.org/book/second-edition/

= slide 'Rust playpen' do
  p
    a href="https://play.rust-lang.org/"
      ' https://play.rust-lang.org/

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', '–ß–∏—Å–ª–∞' do
  ' <table>
      <thead>
        <tr>
          <th rowspan="2">Length</th>
          <th colspan="2">Rust</th>
          <th colspan="2">C/C++</th>
        </tr>
        <tr>
          <th>Signed</th>
          <th>Unsigned</th>
          <th>Signed</th>
          <th>Unsigned</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>8-bit</td>
          <td><code>i8</code></td>
          <td><code>u8</code></td>
          <td><code>char</code></td>
          <td><code>unsigned char</code></td>
        </tr>
        <tr>
          <td>16-bit</td>
          <td><code>i16</code></td>
          <td><code>u16</code></td>
          <td><code>short</code></td>
          <td><code>unsigned short</code></td>
        </tr>
        <tr>
          <td>32-bit</td>
          <td><code>i32</code></td>
          <td><code>u32</code></td>
          <td><code>int</code></td>
          <td><code>unsigned int</code></td>
        </tr>
        <tr>
          <td>64-bit</td>
          <td><code>i64</code></td>
          <td><code>u64</code></td>
          <td><code>long long</code></td>
          <td><code>unsigned long long</code></td>
        </tr>
        <tr>
          <td>arch</td>
          <td><code>isize</code></td>
          <td><code>usize</code></td>
          <td><code>long</code></td>
          <td><code>unsigned long</code> / <code>size_t</code></td>
        </tr>
      </tbody>
    </table>

  p –¢–∏–ø–∞ <code>u8</code> –∏ —Ç–∏–ø–∞ <code>char</code> —Å–∞ –Ω–∞–ø—ä–ª–Ω–æ —Ä–∞–∑–ª–∏—á–Ω–∏!

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', '–ß–∏—Å–ª–∞ (–ª–∏—Ç–µ—Ä–∞–ª–∏)' do
  list:
    –¶—è–ª–æ —á–∏—Å–ª–æ: <code>42</code>
    –°–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω —Ç–∏–ø: <code>42u32</code>
    –ì–æ–ª–µ–º–∏ —á–∏—Å–ª–∞: <code>133_587</code>
    <code>42_u32</code>
    <code>1_0_0_0</code>
    <code>1_____________________________________________________4</code>

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', '–ß–∏—Å–ª–∞ (–≤ —Ä–∞–∑–ª–∏—á–Ω–∏ –±—Ä–æ–π–Ω–∏ —Å–∏—Å—Ç–µ–º–∏)' do
  list:
    Hex: <code>0xDEADBEEF</code>
    Octal: <code>0o77</code>
    Binary: <code>0b1010011010</code>

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', '–ß–∏—Å–ª–∞ (—Å –ø–ª–∞–≤–∞—â–∞ –∑–∞–ø–µ—Ç–∞—è)' do
  table
    thead
      tr
        th Length
        th Rust
        th C/C++
    tbody
      tr
        td 32-bit
        td <code>f32</code>
        td <code>float</code>
      tr
        td 64-bit
        td <code>f64</code>
        td <code>double</code>

  list:
    <code>3.14</code> // f64
    <code>3.14_f32</code> // f32

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', 'bool' do
  list:
    <code>true</code>
    <code>false</code>
    –ì–æ–ª–µ–º–∏–Ω–∞ 1 –±–∞–π—Ç

  list:
    –û–ø–µ—Ä–∞—Ç–æ—Ä–∏ <code>&&</code>, <code>||</code>, <code>&</code>, <code>|</code>, <code>^</code>, <code>!</code>
    <code>&&</code> –∏ <code>||</code> —Å–∞ –º—ä—Ä–∑–µ–ª–∏–≤–∏

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', 'unit' do
  table
    thead
      tr
        th Rust
        th C/C++
    tbody
      tr
        td <code>()</code>
        td <code>void</code>

= slide '–ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏' do
  example:
    let pi: f64 = 3.14;
    let pi      = 3.14;
    let pi: f32 = 3.14;
    let pi      = 3.14_f32;

  p –ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –¥–µ–∫–ª–∞—Ä–∏—Ä–∞—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ —Å –µ–¥–Ω–æ <code>let</code> —Ç–≤—ä—Ä–¥–µ–Ω–∏–µ

  example:
    let x = 5, y = 3;   // –≥—Ä–µ—à–∫–∞

= slide 'No emoji' do
  example:
    fn main() {
        let üòÄ = 123;
        println!("{:?}", üòÄ);
    }

  pre
    ' error: unknown start of token: \u{1f600}
      --> src/main.rs:2:7
        |
      2 |   let üòÄ = 123;
        |       ^

      error: Could not compile `playground`.

= slide 'No emoji' do
  img src="images/no_emoji.png"

= slide '–ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏', 'shadowing' do
  example:
    let x = 10;
    let x = x + 10;
    let x = x * 3;

    // the rest of the code

= slide '–ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏', 'shadowing' do
  example:
    let x1 = 10;
    let x2 = x1 + 10;
    let x3 = x2 * 3;

    // the rest of the code

= slide '–ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏', 'shadowing' do
  example:
    let x = 10;
    {
        let x = x + 10;
        {
           let x = x * 3;

           // the rest of the code
        }
    }

= slide '–ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏', 'mutability' do
  example:
    let x = 5;
    x += 1;     // –≥—Ä–µ—à–∫–∞

  example:
    let mut x = 5;
    x += 1;

  list:
    immutable –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ
    –∫–ª—é—á–æ–≤–∞ –¥—É–º–∞ <code>mut</code>

= slide '–ö–æ–º–µ–Ω—Ç–∞—Ä–∏' do
  p –ï–¥–Ω–æ—Ä–µ–¥–æ–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä

  example:
    // So we‚Äôre doing something complicated here, long enough that we need
    // multiple lines of comments to do it! Whew! Hopefully, this comment will
    // explain what‚Äôs going on.

  p Rust –ø–æ–¥–¥—ä—Ä–∂–∞ –∏ –±–ª–æ–∫–æ–≤–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏ <code>/* ... */</code>, –Ω–æ —Å–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ <code>//</code>

  example:
    /*
      So we‚Äôre doing something complicated here, long enough that we need
      multiple lines of comments to do it! Whew! Hopefully, this comment will
      explain what‚Äôs going on.
    */

= slide '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –º–µ–∂–¥—É —Ç–∏–ø–æ–≤–µ', '(type casting)' do
  p –ö–ª—é—á–æ–≤–∞—Ç–∞ –¥—É–º–∞ <code>as</code>.

  example:
    let one = true as u8;
    let two_hundred = -56i8 as u8;
    let three = 3.14 as u32;

  p –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –æ—Ç –ø–æ-–≥–æ–ª—è–º —Ç–∏–ø –∫—ä–º –ø–æ-–º–∞–ª—ä–∫ –º–æ–∂–µ –¥–∞ –¥–æ–≤–µ–¥–µ –¥–æ –∑–∞–≥—É–±–∞ –Ω–∞ –¥–∞–Ω–Ω–∏

  example:
    let x = 0b11111111_00000001_u16;
    let y = x as u8;

    println!("{}", y); // ??

= slide '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —á–∏—Å–ª–∞', '–∞—Ä–∏—Ç–º–µ—Ç–∏–∫–∞' do
  example:
    let sum = 5 + 10;             // —Å—ä–±–∏—Ä–∞–Ω–µ
    let difference = 95.5 - 4.3;  // –∏–∑–≤–∞–∂–¥–∞–Ω–µ
    let product = 4 * 30;         // —É–º–Ω–æ–∂–µ–Ω–∏–µ
    let quotient = 56.7 / 32.2;   // –¥–µ–ª–µ–Ω–µ
    let remainder = 43 % 5;       // –æ—Å—Ç–∞—Ç—ä–∫

  p –ù–µ –º–æ–∂–µ –¥–∞ –ø—Ä–∏–ª–∞–≥–∞–º–µ –∞—Ä–∏—Ç–º–µ—Ç–∏—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ä—Ä—Ö—É —á–∏—Å–ª–∞ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω–∏ —Ç–∏–ø–æ–≤–µ

  example:
    let x = 4_u32 - 1_u8;         // –≥—Ä–µ—à–∫–∞
    let y = 1.2_f64 / 0.8_f32;    // –≥—Ä–µ—à–∫–∞

  p A—Ä–∏—Ç–º–µ—Ç–∏—á–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ö–≤—ä—Ä–ª—è—Ç –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–ø—ä–ª–≤–∞–Ωe (integer overflow / underflow)

  example:
    let x = 255_u8;
    let y = x + 1;                // üí•

= slide '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —á–∏—Å–ª–∞', '–∞–∫—É–º—É–ª–∞—Ç–∏–≤–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏' do
  example:
    sum += 100;
    difference -= 4.0;
    product *= 1;
    quotient /= 1.2;
    remainder %= 2;

  p –ù—è–º–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ <code>++</code> –∏ <code>--</code>

  example:
    x += 1;
    x -= 1;

= slide '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —á–∏—Å–ª–∞', '—Å—Ä–∞–≤–Ω–µ–Ω–∏—è' do
  example:
    2   >   1
    x   <   95
    3   >=  3
    -10 <=  1
    a   ==  a
    5   !=  1000

  p –í—Å–∏—á–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä—ä—â–∞—Ç —Ä–µ–∑—É–ª—Ç–∞—Ç –æ—Ç —Ç–∏–ø <code>bool</code>.

= slide '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —á–∏—Å–ª–∞', '–ø–æ–±–∏—Ç–æ–≤–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏' do
  example:
    0b0010   &   0b0001
    x        |     0x5F
    0b0011   ^   0b1001
    0b0001   <<       3
    0b1000   >>       2
    !x

  p –û–ø–µ—Ä–∞—Ç–æ—Ä—ä—Ç –∑–∞ –ø–æ–±–∏—Ç–æ–≤–æ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –µ <code>!</code>

= slide 'Control flow', 'if-–∫–ª–∞—É–∑–∏' do
  example:
    if bool_expression {
        // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    } else if another_bool_expression {
        // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    } else {
        // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    }

= slide 'Control flow', 'if-–∫–ª–∞—É–∑–∏' do
  example:
    if 2 > 1 {
        // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    } else if 5 != 2 {
        // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    } else {
        // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    }

= slide 'Control flow', '—Ü–∏–∫–ª–∏' do
  example:
    while bool_expression {
        // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    }

  example:
    loop {
        // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    }

  list:
    <code>loop</code> e —Å—ä—â–æ—Ç–æ –∫–∞—Ç–æ <code>while true</code>, –Ω–æ –ø–æ-—á–µ—Ç–∏–º–æ
    <code>for in</code> —Ä–∞–±–æ—Ç–∏ —Å –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∏

= slide 'Control flow', '–ò–º–µ–Ω—É–≤–∞–Ω–∏ —Ü–∏–∫–ª–∏' do
  example:
    'outer: loop {
        'inner: loop {
            break 'outer;
        }
        println!("John Cena");
    }

  p.action <code>'outer</code> –∏ <code>'inner</code> —Å–µ –Ω–∞—Ä–∏—á–∞—Ç –µ—Ç–∏–∫–µ—Ç–∏ (labels)

= slide '–§—É–Ω–∫—Ü–∏–∏' do
  example:
    fn main() {
        println!("Hello, world!");
        another_function();
    }

    fn another_function() {
        println!("Another function.");
    }

= slide '–§—É–Ω–∫—Ü–∏–∏' do
  example:
    fn name(param1: Type1, param2: Type2) -> ResultType {
        // —Ç—è–ª–æ
    }

  example:
    fn add(a: u32, b: u32) -> u32 {
        // note no semicolon
        a + b
    }

  list:
    –ó–∞–¥–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Ç–∏–ø–æ–≤–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ –∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ (–Ω—è–º–∞ type inference)
    –í—ä—Ä–Ω–∞—Ç–∞–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –µ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—è –∏–∑—Ä–∞–∑ –≤ —Ç—è–ª–æ—Ç–æ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞
    –ê–∫–æ –∏—Å–∫–∞–º–µ –¥–∞ –∏–∑–ª–µ–∑–µ–º –æ—Ç —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –ø—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—è —Ä–µ–¥, –º–æ–∂–µ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ <code>return</code>
    –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ <code>return</code> –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—è —Ä–µ–¥ –æ—Ç —Ç—è–ª–æ—Ç–æ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ —Å—á–∏—Ç–∞ –∑–∞ –ª–æ—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞

= slide 'Statements & Expressions', '–¢–≤—ä—Ä–¥–µ–Ω–∏–µ (statement)'do
  example:
    let x = (let y = 10);   // –≥—Ä–µ—à–∫–∞

  list:
    –Ω—è–º–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
    <code>let x = 10;</code>
    <code>return 25;</code>

= slide 'Statements & Expressions', '–ò–∑—Ä–∞–∑ (expression)'do
  list:
    –æ–ø–µ—Ä–∞—Ü–∏—è –∫–æ—è—Ç–æ –≤—Ä—ä—â–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç
    <code>1</code>
    <code>(2 + 3) * 4</code>
    <code>add(5, 6)</code>
    –º–æ–∂–µ –¥–∞ —Å–µ –ø—Ä–∏—Å–≤–æ–∏ –Ω–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞ —á—Ä–µ–∑ <code>let</code>

= slide 'Statements & Expressions' do
  p if-else –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ç–∞ –µ –∏–∑—Ä–∞–∑ (expression)

  example:
    let x = if true {
        5
    } else {
        3
    };

  p Rust –Ω—è–º–∞ —Ç–µ—Ä–Ω–∞—Ä–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ —Ç–∞–∑–∏ –ø—Ä–∏—á–∏–Ω–∞

  example:
    let x = if true { 5 } else { 3 };

= slide 'Statements & Expressions' do
  example:
    let x = loop {
        break 5;
    };

  p <code>loop</code> –µ –∏–∑—Ä–∞–∑

= slide 'Macros' do
  list:
    –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–¥
    —Ä–∞–∑–ª–∏—á–∞–≤–∞ —Å–µ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –ø–æ <code>!</code> —Å–ª–µ–¥ –∏–º–µ—Ç–æ
    <code>println!</code>
    <code>print!</code>

= slide 'println! macro' do
  example:
    let x = 5;
    let y = 10;
    println!("x = {} and y = {}", x, y);

  list:
    –ü—Ä–∏–Ω—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞
    <code>{}</code> placeholders
