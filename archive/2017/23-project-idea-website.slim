= slide 'Административни неща' do
  list:
    Няма пето домашно :/
    Второ предизвикателство
    Вижте тази новина за повече информация: [https://fmi.rust-lang.bg/announcements/10](https://fmi.rust-lang.bg/announcements/10)

= slide 'Идея за проект - Уебсайт' do
  p Пълния код се намира тук: <a href="https://github.com/d3lio/simple-website">d3lio/simple-website</a>

= slide 'Идея за проект - Уебсайт' do
  p "Модела" и "Уеб" частта са отделни. Играта си има някакви логически смислени методи, които биха работили по подобен начин, дори да не беше уеб. Спокойно може да си ги тествате в изолация, да експериментирате с тях.

  p Уеб частта просто връща JSON. Rust не е от най-удобните езици за сложни уеб приложения, предвид static typing, и сравнително ограничено метапрограмиране. Уеба не е statically typed, та езици като Ruby, Python, PHP, са по-удобни за бързия, "Дизайнера иска промени, маркетинг хората искат промени, SEO хората искат промени" workflow, който е типичен за този тип работа.

  p Rust вероятно би се използвал за по-изолирани services, които имат смисъл да размятат наоколо само някакви JSON-чета. Може и да се използва подобен подход за single-page apps, в които темплейтите са в javascript, и само се рендерират данните от приложението.

  p Cargo.io е направен точно така -- Ember.js, който получава данни от Rust. Кода му се намира <a href="https://github.com/rust-lang/crates.io">в github</a>

= slide 'Идея за проект - Уебсайт' do
  p Ако все пак искате да рендерирате templates:

  list:
    [Handlebars](https://github.com/sunng87/handlebars-rust)
    [Macro-та, които генерират HTML](https://github.com/Stebalien/horrorshow-rs)
