= slide 'Административни неща' do
  list:
    Днес и следващите два пъти ще разглеждаме примерни проекти
    Имате домашно 4 : 'Search', до петък, точно в 5
    Предизвикани сте
    Мислете за проекти

= slide 'Преговор' do
  list:
    Слушахме за Foreign Function Interface (ffi)
    Плюскахме
    Пихме
    Възкръснахме за да се видим днес!
    Време е за бира!
    But first...

= slide 'Идея за проект - прост интерпретатор' do
  list:
    Има много начини да напишем интерпретатор с REPL (Read–eval–print loop)
    Алтернатива е да напишем и frontend към нещо като LLVM
    Или наша си абстрактна машина :)
    Но за проект прост интерпретатор, който чете, пресмята резултат и го принтира върши работа.

= slide 'Meddling with Rust' do
  list:
    За мен оптималното решение не е важно
    Важно е да използваме езика по предназначение и да имаме сравнително добре работещ резултат
    Прост динамично-типизиран език за пример е scheme.
    Под-множество на scheme...

= slide 'Проект и структура' do
  list:
    Най-простият вид интерпретатор има:
    Lexer - чете input и определя кои части от инпута вършат работа и какво значат
    Parser - Строи AST
    Interpreter/Evaluator - Пресмята изхода на програмата, обхождайки и опростявайки AST-то от парсъра.
    REPL - Чака за input и ползва горните 3 за да го eval-не и изведе резултата

= slide 'Проект и структура' do

  example:
    input(string) -> Lexer -> tokens -> Parser -> Terms/Nodes -> Interpreter -> values -> output

= slide 'Демо' do
  p Да си пуснем REPL-а

= slide 'The Lexer' do
  p Ще гледаме код и ще помислим защо и как

= slide 'The parser' do
  p Ще гледаме код и ще помислим защо и как

= slide 'The Interpreter' do
  p Ще гледаме код и ще помислим защо и как

= slide 'REPL' do
  p Ще гледаме код и ще помислим защо и как

= slide 'Ресурси', 'кодът' do
  list:
    [Кодът в github](https://github.com/meddle0x53/mscheme)
    Може и да блогна по темата

= slide 'Ресурси', 'lex/parse' do
  list:
    [Nom](https://github.com/Geal/nom)
    [Plex](https://github.com/goffrie/plex)
    [lexpar](https://github.com/d3lio/lexpar)

