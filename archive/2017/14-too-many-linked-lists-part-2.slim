= slide 'Learning Rust With Entirely Too Many Linked Lists' do
  ul
    li
      a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/README.html"
        ' Оригиналния източник

    li
      a href="https://github.com/rust-unofficial/too-many-lists/tree/master/lists"
        ' Пълния код

    li Тези слайдове ще съдържат само кратки обобщения на интересни части от кода.

= slide 'Persistent stack' do
  p Списък, който е напълно immutable. "Добавяне" на елемент няма, просто се конструира нов списък.

  p При това конструиране обаче, се споделя предишното тяло. Това означава, че, дори да създаваме "копия" на списъците, това не води до копиране на потенциално десетки хиляди елементи.

  example:
    //  list1 -> A ---v
    //  list2 ------> B -> C -> D
    //  list3 -> X ---^

  p Още информация може да си намерите в <a href="https://en.wikipedia.org/wiki/Persistent_data_structure">Wikipedia</a>, ако сте любопитни. Популярни са за езици, които наблягат на паралелизъм (haskell, erlang/elixir, clojure), понеже mutability върху shared memory е сложно в multithreaded среди.

= slide 'Append' do
  p Този път не викаме <code>take</code>, понеже не искаме ownership -- може нещо друго да сочи към главата. Използваме <code>Rc::clone</code>, за да вземем наш си <code>Rc</code>, който сочи към същата памет.

  example:
    pub struct List<T> { head: Option<Rc<Node<T>>> }

    struct Node<T> { elem: T, next: Option<Rc<Node<T>>>, }

    pub fn append(&self, elem: T) -> Self {
        let new_node = Rc::new(Node {
            elem: elem,
            next: self.head.as_ref().map(|node| Rc::clone(node)),
        });

        List { head: Some(new_node) }
    }

= slide 'Append' do
  p Спокойно можем да опростим map-а, използвайки <code>Option::clone()</code>. Клонирането на option просто вика clone на съдържанието му.

  example:
    let new_head = self.head.as_ref().map(|node| Rc::clone(node));

    // Еквивалентно на:
    let new_head = self.head.clone();

= slide 'Append' do
  p Вземането на опашката е интересно, понеже не използваме <code>map</code>, а използваме <code>and_then</code>

  example:
    pub fn tail(&self) -> Self {
        List {
            head: self.head.as_ref().and_then(|rc_node| rc_node.next.clone())
        }
    }

  ul
    li <code>map</code> очаква функцията да върне някаква стойност, която ще се пакетира в <code>Some</code>
    li <code>and_then</code> очаква функцията да върне <code>Option</code>. Това означава, че резултата може и да е <code>None</code>, за разлика от <code>map</code>.
    li Опашката на един списък ще е празна ако списъка е празен, но и ако списъка има само един елемент. Има логика да имаме две проверки за <code>None</code>.

= slide 'Rc::try_unwrap' do
  p Как да вземем стойност от <code>Rc</code>? Трудно. Трябва да имаме само един-единствен <code>Rc</code>, който сочи към стойността.

  example:
    if let Ok(mut node) = Rc::try_unwrap(node) {
        // Имаме пълен ownership над истинската стойност.
    } else {
        // Нещо друго някъде сочи към същата стойност. Не можем да я пипаме.
    }

= slide 'Mutable Deque' do
  p Двойносвързан списък усложнява нещата. Всеки елемент има Link напред и Link назад. Списъка има Link-ове към началото и края.

  example:
    use std::rc::Rc;
    use std::cell::{RefCell, Ref};

    type Link<T> = Option<Rc<RefCell<Node<T>>>>;

    pub struct List<T> {
        head: Link<T>,
        tail: Link<T>,
    }

    struct Node<T> {
        elem: T,
        next: Link<T>,
        prev: Link<T>,
    }

= slide 'Mutable Deque' do
  example:
    type Link<T> = Option<Rc<RefCell<Node<T>>>>;

  ul
    li Имаме нужда от <code>Option</code>, както винаги, за да кодираме възможната липса на линк (празен списък, "предишния" линк на първия елемент, "следващия" линк на последния елемент)
    li Имаме нужда от <code>Rc</code>, понеже ще имаме няколко променливи, които ще own-ват споделена стойност.
    li Имаме нужда от <code>RefCell</code>, понеже иначе няма как да мутираме deque-а.

= slide 'RefCell::borrow_mut' do
  p Клонирането на <code>Option&lt;Rc&lt;T&gt;&gt;</code> работи по същия начин. Новото е, че имаме нужда от (временен) mutable reference с <code>borrow_mut</code>, за да викаме методи и достъпваме атрибути на вътрешната му стойност.

  example:
    pub fn push_front(&mut self, elem: T) {
        let new_head = Node::new(elem) //: Rc<RefCell<Node<T>>>;

        match self.head.take() {
            Some(old_head) => {
                old_head.borrow_mut().prev = Some(new_head.clone());
                new_head.borrow_mut().next = Some(old_head);
                self.head = Some(new_head);
            },
            None => {
                self.tail = Some(new_head.clone());
                self.head = Some(new_head);
            }
        }
    }

= slide 'Ref' do
  p За нещастие, не можем да <em>извадим</em> истински reference към вътрешната стойност, и да го върнем. Методите <code>borrow</code> и <code>borrow_mut</code> не връщат <code>&amp;T</code>, връщат <code>Ref&lt;T&gt;</code>

  example:
    pub fn peek_front(&self) -> Option<Ref<T>> {
        self.head.as_ref().map(|node| {
            Ref::map(node.borrow(), |r| &r.elem)
        })
    }

  p Тъй като <code>RefCell</code> имплементира borrow-checker at runtime, това няма как да върне валиден reference, който е проверен at compile-time. Sadness.

= slide 'Ref' do
  p Поне в случай, че имаме ownership над стойността, можем да я достъпим с <code>into_inner</code>. Все е нещо:

  example:
    match Rc::try_unwrap(old_head) {
        Ok(cell_node) => {
            cell_node.into_inner().elem
        },
        Err(_) => panic!("Popping a list failed, some Rc is messed up!"),
    }

= slide 'Unsafe queue' do
  p Ако искаме да имплементираме опашка, един лесен начин е да посегнем към unsafe pointers:

  example:
    pub struct List<T> {
        head: Link<T>,
        tail: *mut Node<T>,
    }

    type Link<T> = Option<Box<Node<T>>>;

    struct Node<T> {
        elem: T,
        next: Link<T>,
    }

  p В този случай, това не е чак толкова опасно, понеже го използваме в много ограничен вариант. Все пак трябва да внимаваме.

= slide 'Unsafe queue' do
  example:
    pub fn push(&mut self, elem: T) {
        let mut new_tail = Box::new(Node { elem: elem, next: None });
        let raw_tail: *mut _ = &mut *new_tail;

        if self.tail.is_null() {
            self.head = Some(new_tail);
        } else {
            unsafe { (*self.tail).next = Some(new_tail); }
        }

        self.tail = raw_tail;
    }

  p Можем да вземем pointer директно от валиден reference чрез type coercion. Единствената unsafe операция е когато дереференцираме pointer-а, за да достъпим стойността, до която сочи.

= slide 'Unsafe queue' do
  p Алтернативата на това да използваме unsafe код, е да променим цялата структура на списъка, за да позволим множествен ownership над една стойност.

  p В случая, единствено ни трябва втора връзка към опашката. Всички останали са си едносвързани. Не можем да използваме <code>Box</code>, понеже той изисква ownership. Не можем да използваме прост reference, понеже ако премахнем опашката, reference-а ще виси.

  p След като обещаем на компилатора да сме много внимателни, той е ок да ни даде стойност, която може да се занули и може да сочи към невалидна памет. Разбира се, ако сбъркаме, ще съборим програмата с един хубав segfault. В случая, риска вероятно си заслужава, но за по-сложни неща е добре внимателно да оценим предимствата и недостатъците.
